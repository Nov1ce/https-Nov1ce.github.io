<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Particle Animation with Direct Couch Image</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
            background-color: black;
        }
        #particleCanvas, #couchExperience {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        #couchExperience {
            display: none;
            background-color: #f0f0f0;
            text-align: center;
        }
        #couchImage {
            max-width: 80%;
            max-height: 80%;
            margin-top: 5%;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <canvas id="particleCanvas"></canvas>
    <div id="couchExperience">
        <img id="couchImage" src="path_to_your_couch_image.jpg" alt="Vintage Couch">
    </div>

    <script>
    (function() {
        console.log('Script started');
        const canvas = document.getElementById('particleCanvas');
        const ctx = canvas.getContext('2d');
        
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            console.log(`Canvas resized to ${canvas.width}x${canvas.height}`);
        }
        
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        let particles = [];
        const particleCount = 100;
        let specialParticle;
        let hue = 0;

        class Particle {
            constructor(x, y, size, special = false) {
                this.x = x;
                this.y = y;
                this.size = size;
                this.speedX = (Math.random() * 3 - 1.5) * 0.5;
                this.speedY = (Math.random() * 3 - 1.5) * 0.5;
                this.special = special;
            }

            update() {
                this.x += this.speedX;
                this.y += this.speedY;

                if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;
                if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;
            }

            draw() {
                ctx.fillStyle = this.special ? 'white' : `hsl(${hue}, 100%, 50%)`;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();
            }
        }

        function init() {
            console.log('Initializing particles');
            particles = [];
            for (let i = 0; i < particleCount; i++) {
                const x = Math.random() * canvas.width;
                const y = Math.random() * canvas.height;
                particles.push(new Particle(x, y, 2));
            }
            specialParticle = new Particle(canvas.width / 2, canvas.height / 2, 30, true);
            console.log('Particles initialized');
        }

        function animate() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            for (let particle of particles) {
                particle.update();
                particle.draw();
            }
            specialParticle.update();
            specialParticle.draw();

            hue = (hue + 0.5) % 360;
            requestAnimationFrame(animate);
        }

        canvas.addEventListener('click', (event) => {
            const rect = canvas.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            const distance = Math.sqrt((x - specialParticle.x)**2 + (y - specialParticle.y)**2);

            if (distance <= specialParticle.size) {
                console.log('Special particle clicked');
                canvas.style.display = 'none';
                document.getElementById('couchExperience').style.display = 'block';
            }
        });

        const couchImage = document.getElementById('couchImage');
        let couchHue = 0;

        couchImage.addEventListener('click', () => {
            couchHue = (couchHue + 60) % 360;
            couchImage.style.filter = `hue-rotate(${couchHue}deg)`;
        });

        init();
        animate();
        console.log('Animation started');
    })();
    </script>
</body>
</html>
